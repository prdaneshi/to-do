{"version":3,"sources":["index.js"],"names":["App","useState","task","status","items","setItem","checkBoxClicked","e","target","id","checked","splice","push","DeleteTask","List","item","className","onClick","type","onChange","event","newTask","parentNode","childNodes","value","unshift","pervItem","Object","entries","map","ReactDOM","render","document","getElementById"],"mappings":"wLAIMA,EAAM,WAAO,IAAD,EACOC,mBAAS,CAC9B,CAAEC,KAAM,gBAAiBC,QAAQ,GACjC,CAAED,KAAM,iBAAkBC,QAAQ,GAClC,CAAED,KAAM,gBAAiBC,QAAQ,KAJnB,mBACXC,EADW,KACJC,EADI,KA6BVC,EAAkB,SAACC,GAEvB,GADAH,EAAMG,EAAEC,OAAOC,IAAIN,OAASI,EAAEC,OAAOE,QACjCH,EAAEC,OAAOE,QAAS,CACpB,IAAMA,EAAUN,EAAMO,OAAOJ,EAAEC,OAAOC,GAAI,GAC1CL,EAAMQ,KAAKF,EAAQ,IAErBL,EAAQ,YAAID,IAERG,EAAEC,OAAOE,SASTG,EAAa,SAACN,GAClBH,EAAMO,OAAOJ,EAAEC,OAAOC,GAAI,GAC1BJ,EAAQ,YAAID,KAERU,EAAO,SAACC,GACZ,OACE,+BACE,mBAAGC,UAAU,cAAcC,QAASJ,EAAYJ,GAAIM,EAAK,KACzD,uBACEN,GAAIM,EAAK,GACTG,KAAK,WACLC,SAAUb,EACVI,QAASK,EAAK,GAAGZ,SAEnB,+BAAOY,EAAK,GAAGb,SARRa,EAAK,KAalB,OACE,gCACE,uBAAOC,UAAU,QAAQE,KAAK,SAC9B,wBAAQD,QA7DQ,SAACG,GACnB,IAAMC,EAAU,CACdnB,KAAMkB,EAAMZ,OAAOc,WAAWC,WAAW,GAAGC,MAC5CrB,QAAQ,GAEVC,EAAMQ,KAAKS,GACXhB,EAAQ,YAAID,KAuDV,4BACA,wBAAQa,QArDK,SAACG,GAChB,IAAMC,EAAU,CACdnB,KAAMkB,EAAMZ,OAAOc,WAAWC,WAAW,GAAGC,MAC5CrB,QAAQ,GAEVC,EAAMqB,QAAQJ,GAEdhB,GAAQ,SAACqB,GAEP,OADW,YAAOA,OA6ClB,yBACA,+BA5BaC,OAAOC,QAAQxB,GAAOyB,IAAIf,GA4BvC,WAKNgB,IAASC,OAAO,cAAC/B,EAAD,IAASgC,SAASC,eAAe,W","file":"static/js/main.3b7387bc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst App = () => {\n  let [items, setItem] = useState([\n    { task: \"first element\", status: false },\n    { task: \"second element\", status: false },\n    { task: \"third element\", status: false },\n  ]);\n\n  const addToBotton = (event) => {\n    const newTask = {\n      task: event.target.parentNode.childNodes[0].value,\n      status: false,\n    };\n    items.push(newTask);\n    setItem([...items]);\n  };\n\n  const addToTop = (event) => {\n    const newTask = {\n      task: event.target.parentNode.childNodes[0].value,\n      status: false,\n    };\n    items.unshift(newTask);\n\n    setItem((pervItem) => {\n      let newItem = [...pervItem];\n      return newItem;\n    });\n  };\n\n  const checkBoxClicked = (e) => {\n    items[e.target.id].status = e.target.checked;\n    if (e.target.checked) {\n      const checked = items.splice(e.target.id, 1);\n      items.push(checked[0]);\n    }\n    setItem([...items]);\n\n    if (e.target.checked) {\n    }\n  };\n\n  const CreatList = () => {\n    const result = Object.entries(items).map(List);\n    return result;\n  };\n\n  const DeleteTask = (e) => {\n    items.splice(e.target.id, 1);\n    setItem([...items]);\n  };\n  const List = (item) => {\n    return (\n      <li key={item[0]}>\n        <i className=\"fa fa-trash\" onClick={DeleteTask} id={item[0]}></i>\n        <input\n          id={item[0]}\n          type=\"checkbox\"\n          onChange={checkBoxClicked}\n          checked={item[1].status}\n        />\n        <span>{item[1].task}</span>\n      </li>\n    );\n  };\n\n  return (\n    <div>\n      <input className=\"input\" type=\"text\" />\n      <button onClick={addToBotton}> add to bottom</button>\n      <button onClick={addToTop}> add to top</button>\n      <ul>{CreatList()} </ul>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}