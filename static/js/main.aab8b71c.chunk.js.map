{"version":3,"sources":["index.js"],"names":["App","useState","task","status","items","setItem","checkBoxClicked","e","console","log","target","id","checked","splice","push","pervItem","onChange","List","item","type","onClick","className","event","parentNode","childNodes","value","newTask","newItem","unshift","result","Object","entries","map","CreatList","ReactDOM","render","document","getElementById"],"mappings":"wLAMMA,EAAM,WAAM,MASOC,mBAAS,CAC9B,CAAEC,KAAM,gBAAiBC,QAAQ,GACjC,CAAED,KAAM,iBAAkBC,QAAQ,GAClC,CAAED,KAAM,gBAAiBC,QAAQ,KAZnB,mBASXC,EATW,KASJC,EATI,KAkEVC,EAAkB,SAACC,GAYvB,GAXAC,QAAQC,IAAI,cAKZD,QAAQC,IAAIF,EAAEG,OAAOC,IAKrBP,EAAMG,EAAEG,OAAOC,IAAIR,OAASI,EAAEG,OAAOE,QACjCL,EAAEG,OAAOE,QAAS,CACpB,IAAMA,EAAUR,EAAMS,OAAON,EAAEG,OAAOC,GAAI,GAE1CH,QAAQC,IAAIL,EAAMG,EAAEG,OAAOC,KAC3BH,QAAQC,IAAI,UAAWG,GAIvBJ,QAAQC,IAAI,sBAAuBL,GACnCA,EAAMU,KAAKF,EAAQ,IACnBJ,QAAQC,IAAI,sBAAuBL,GAGrCC,GAAQ,SAACU,GAGP,OAFW,YAAOA,MAKhBR,EAAEG,OAAOE,SAOTI,EAAW,SAACT,GAChBC,QAAQC,IAAI,aAaRQ,EAAO,SAACC,GAOZ,OACE,+BACE,uBACEP,GAAIO,EAAK,GACTC,KAAK,WACLC,QAASd,EACTU,SAAUA,EACVJ,QAASM,EAAK,GAAGf,SAEnB,+BAAOe,EAAK,GAAGhB,SARRgB,EAAK,KAclB,OACE,gCACE,uBAAOG,UAAU,QAAQF,KAAK,OAAOH,SAxHrB,SAACM,OAyHjB,wBAAQF,QApHQ,SAACE,GACnBd,QAAQC,IAAI,cAEZD,QAAQC,IAAIa,EAAMZ,OAAOa,WAAWC,WAAW,GAAGC,OAClD,IAAMC,EAAU,CACdxB,KAAMoB,EAAMZ,OAAOa,WAAWC,WAAW,GAAGC,MAC5CtB,QAAQ,GAEVC,EAAMU,KAAKY,GAOXrB,GAAQ,SAACU,GACP,IAAIY,EAAO,YAAOZ,GAElB,OADAP,QAAQC,IAAI,cAAeM,GACpBY,MAkGP,4BACA,wBAAQP,QA/FK,SAACE,GAChBd,QAAQC,IAAI,cAEZ,IAAMiB,EAAU,CACdxB,KAAMoB,EAAMZ,OAAOa,WAAWC,WAAW,GAAGC,MAC5CtB,QAAQ,GAEVC,EAAMwB,QAAQF,GAEdrB,GAAQ,SAACU,GAIP,OAHW,YAAOA,OAqFlB,yBACA,+BApCc,WAChBP,QAAQC,IAAI,aACZD,QAAQC,IAAIL,GACZ,IAAMyB,EAASC,OAAOC,QAAQ3B,GAAO4B,IAAIf,GAIzC,OADAT,QAAQC,IAAI,uBAAwBoB,GAC7BA,EA6BAI,GAAL,WAONC,IAASC,OAAO,cAACnC,EAAD,IAASoC,SAASC,eAAe,W","file":"static/js/main.aab8b71c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\n// let inputValue = undefined;\n\nconst App = () => {\n  // let items = new Map();\n  // let [items, setItem] = useState(new Map());\n  // const [checked, setchecked] = useState(false);\n  // let [items, setItem] = useState([\n  //   [\"first element\", true],\n  //   [\"second element\", false],\n  //   [\"third element\", false],\n  // ]);\n  let [items, setItem] = useState([\n    { task: \"first element\", status: true },\n    { task: \"second element\", status: false },\n    { task: \"third element\", status: false },\n  ]);\n  // console.log(usePrevious(items));\n  // console.log(items.includes(\"first element\"));\n  // setItem(items.set(\"first element\", true));\n  // items\n  //   .set(\"first element\", true)\n  //   .set(\"second element\", false)\n  //   .set(\"third element\", false);\n  // console.log(items.get(\"first element\"));\n  const inputHandle = (event) => {\n    // console.log(\"----------\");\n    // console.log(event);\n  };\n\n  const addToBotton = (event) => {\n    console.log(\"----------\");\n\n    console.log(event.target.parentNode.childNodes[0].value);\n    const newTask = {\n      task: event.target.parentNode.childNodes[0].value,\n      status: false,\n    };\n    items.push(newTask);\n    // items[Task] = false;\n    // items = { ...items, Task: false };\n    // items.unshift({ [Task]: false });\n    // let newItem = { ...pervItem };\n    // newItem[Task]\n    // setItem([...items, event.target.parentNode.childNodes[0].value]);\n    setItem((pervItem) => {\n      let newItem = [...pervItem];\n      console.log(\"pervItem = \", pervItem);\n      return newItem;\n    });\n  };\n\n  const addToTop = (event) => {\n    console.log(\"----------\");\n    // console.log(event.target.parentNode.childNodes[0].value);\n    const newTask = {\n      task: event.target.parentNode.childNodes[0].value,\n      status: false,\n    };\n    items.unshift(newTask);\n    // setItem([event.target.parentNode.childNodes[0].value, ...items]);\n    setItem((pervItem) => {\n      let newItem = [...pervItem];\n\n      // console.log(pervItem);\n      return newItem;\n    });\n  };\n\n  const checkBoxClicked = (e) => {\n    console.log(\"==========\");\n    // console.log(e);\n    // console.log(e.target.checked);\n    // e.target.checked = !e.target.checked;\n    // console.log(e.target.checked);\n    console.log(e.target.id);\n\n    // console.log(\"items[e.target.id] = \", items[e.target.id]);\n    // const checked = items[e.target.id];\n\n    items[e.target.id].status = e.target.checked;\n    if (e.target.checked) {\n      const checked = items.splice(e.target.id, 1);\n      // delete items[e.target.id];\n      console.log(items[e.target.id]);\n      console.log(\"checked\", checked);\n      // items[checked] = true;\n      // Object.assign(items, checked);\n      // items = { ...items, checked };\n      console.log(\"befor push items = \", items);\n      items.push(checked[0]);\n      console.log(\"after push items = \", items);\n    }\n\n    setItem((pervItem) => {\n      let newItem = [...pervItem];\n      // console.log(pervItem);\n      return newItem;\n    });\n\n    if (e.target.checked) {\n      // let checkedItem = items.splice(items.indexOf(e.target.id), 1);\n      // setItem([...items, checkedItem]);\n    }\n    // console.log(checkedItem);\n  };\n\n  const onChange = (e) => {\n    console.log(\"onchange\");\n    // return !e.target.checked;\n  };\n\n  const CreatList = () => {\n    console.log(\"creatlist\");\n    console.log(items);\n    const result = Object.entries(items).map(List);\n\n    // console.log(Object.entries(items).forEach((item) => List(item)));\n    console.log(\"Creat List result = \", result);\n    return result;\n  };\n  const List = (item) => {\n    // for (const [key, value] of Object.entries(items)) {\n    //   console.log(`${key}: ${value}`);\n    // }\n    // console.log(\"List fuction = \", item);\n    // console.log(item[1].task);\n\n    return (\n      <li key={item[0]}>\n        <input\n          id={item[0]}\n          type=\"checkbox\"\n          onClick={checkBoxClicked}\n          onChange={onChange}\n          checked={item[1].status}\n        />\n        <span>{item[1].task}</span>\n      </li>\n      // </ul>\n    );\n  };\n\n  return (\n    <div>\n      <input className=\"input\" type=\"text\" onChange={inputHandle} />\n      <button onClick={addToBotton}> add to bottom</button>\n      <button onClick={addToTop}> add to top</button>\n      <ul>{CreatList()} </ul>\n\n      {/* <List /> */}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}